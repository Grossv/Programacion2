/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.Element;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import view.ClassImplements.IOString;
import view.views.panel.pnlTextEditor;
import say.swing.JFontChooser;

/**
 *
 * @author Usuario
 */
public class FrmEditor extends javax.swing.JFrame {

    private int countTab;
    private FileNameExtensionFilter filtro;
    private JFileChooser archivosChooser;
    private IOString iString;
    private JFontChooser fuentesChooser;

    /**
     * Creates new form FrmEditor
     */
    public FrmEditor() {
        countTab = 1;
        filtro = new FileNameExtensionFilter("*txt", "txt");

        initComponents();
        
        pnlTextEditor pnlTextEditor = new pnlTextEditor();
        tbpContent.addTab("Editor" + countTab++, pnlTextEditor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        btnCloseTab = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        tglBold = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        tglLeft = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        tglCenter = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        tglRight = new javax.swing.JToggleButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        tbpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mnINew = new javax.swing.JMenuItem();
        mnIOpen = new javax.swing.JMenuItem();
        mnISave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        formatMenu = new javax.swing.JMenu();
        mniTextFormat = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de Texto");

        jToolBar1.add(jSeparator6);

        btnCloseTab.setText("X");
        btnCloseTab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCloseTab.setFocusable(false);
        btnCloseTab.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCloseTab.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCloseTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseTabActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCloseTab);
        jToolBar1.add(jSeparator3);

        tglBold.setText("Bold");
        tglBold.setFocusable(false);
        tglBold.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglBold.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglBoldActionPerformed(evt);
            }
        });
        jToolBar1.add(tglBold);
        jToolBar1.add(jSeparator2);

        tglLeft.setText("Left Alignment");
        tglLeft.setFocusable(false);
        tglLeft.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglLeft.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglLeftActionPerformed(evt);
            }
        });
        jToolBar1.add(tglLeft);
        jToolBar1.add(jSeparator5);

        tglCenter.setText("Center");
        tglCenter.setFocusable(false);
        tglCenter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglCenter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglCenterActionPerformed(evt);
            }
        });
        jToolBar1.add(tglCenter);
        jToolBar1.add(jSeparator4);

        tglRight.setText("Right Alignment");
        tglRight.setFocusable(false);
        tglRight.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglRight.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglRightActionPerformed(evt);
            }
        });
        jToolBar1.add(tglRight);
        jToolBar1.add(jSeparator7);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);
        getContentPane().add(tbpContent, java.awt.BorderLayout.CENTER);

        mnFile.setText("File");

        mnINew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnINew.setText("New");
        mnINew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnINewActionPerformed(evt);
            }
        });
        mnFile.add(mnINew);

        mnIOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnIOpen.setText("Open...");
        mnIOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnIOpenActionPerformed(evt);
            }
        });
        mnFile.add(mnIOpen);

        mnISave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnISave.setText("Save");
        mnISave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnISaveActionPerformed(evt);
            }
        });
        mnFile.add(mnISave);
        mnFile.add(jSeparator1);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnFile.add(jMenuItem1);

        jMenuBar1.add(mnFile);

        formatMenu.setText("Edit");
        formatMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatMenuActionPerformed(evt);
            }
        });

        mniTextFormat.setText("Text Format");
        mniTextFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniTextFormatActionPerformed(evt);
            }
        });
        formatMenu.add(mniTextFormat);

        jMenuBar1.add(formatMenu);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(816, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnINewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnINewActionPerformed
        pnlTextEditor pnlTextEditor = new pnlTextEditor();
        tbpContent.addTab("Editor" + countTab++, pnlTextEditor);
    }//GEN-LAST:event_mnINewActionPerformed

    private void btnCloseTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseTabActionPerformed
        if (tbpContent.getComponentCount() <= 0) {
            return;
        }
        int option = JOptionPane.showInternalConfirmDialog(null, "Are you sure to delete this tab?", "Confirmation dialog", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (option == 1) {
            return;
        }

        int index = tbpContent.getSelectedIndex();
        tbpContent.remove(index);
    }//GEN-LAST:event_btnCloseTabActionPerformed

    private void mnISaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnISaveActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        int index = tbpContent.getSelectedIndex();
        if (pnlEditor == null) {
            return;
        }
        try {
            int option = getArchivosChooser().showSaveDialog(this);

            if (option == JFileChooser.CANCEL_OPTION) {
                return;
            }

            File file = getArchivosChooser().getSelectedFile();
            iString = new IOString(file);

            iString.writeString(pnlEditor.getTxtpEditor().getText(), false);

            tbpContent.setTitleAt(index, file.getName());
        } catch (IOException ex) {
            Logger.getLogger(FrmEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnISaveActionPerformed

    private void mnIOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnIOpenActionPerformed
        int seleccionado = getArchivosChooser().showOpenDialog(this);

        if (seleccionado == JFileChooser.CANCEL_OPTION) {
            return;
        }

        File file = getArchivosChooser().getSelectedFile();
        iString = new IOString(file);

        pnlTextEditor pnlEditor = new pnlTextEditor();
        try {
            pnlEditor.getTxtpEditor().setText(iString.readString());
        } catch (IOException ex) {
            Logger.getLogger(FrmEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        tbpContent.addTab(file.getName(), pnlEditor);

    }//GEN-LAST:event_mnIOpenActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formatMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatMenuActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        if (pnlEditor == null) {
            return;
        }

        int seleccionado = getFuentesChooser().showDialog(this);
        if (seleccionado == JFontChooser.CANCEL_OPTION) {
            return;
        }

        String texto = pnlEditor.getTxtpEditor().getSelectedText();
        if (texto == null) {
            return;
        }

        Font fuente = getFuentesChooser().getSelectedFont();
        int inicio = pnlEditor.getTxtpEditor().getSelectionStart();
        StyledDocument style = pnlEditor.getTxtpEditor().getStyledDocument();
        pnlEditor.getTxtpEditor().setStyledDocument(getDocumentStyle(fuente, style, inicio, texto.length()));
    }//GEN-LAST:event_formatMenuActionPerformed

    private void tglBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglBoldActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        if (pnlEditor == null) {
            return;
        }

        String text = pnlEditor.getTxtpEditor().getSelectedText();
        if (text == null) {
            return;
        }

        int start = pnlEditor.getTxtpEditor().getSelectionStart();
        StyledDocument style = pnlEditor.getTxtpEditor().getStyledDocument();

        Font font = new Font(Font.SERIF, tglBold.isSelected() ? Font.BOLD : Font.PLAIN, 12);
        pnlEditor.getTxtpEditor().setStyledDocument(getDocumentStyle(font, style, start, text.length()));
    }//GEN-LAST:event_tglBoldActionPerformed

    private void mniTextFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniTextFormatActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        if (pnlEditor == null) {
            return;
        }

        int seleccionado = getFuentesChooser().showDialog(this);
        if (seleccionado == JFontChooser.CANCEL_OPTION) {
            return;
        }

        String text = pnlEditor.getTxtpEditor().getSelectedText();
        if (text == null) {
            return;
        }

        Font font = getFuentesChooser().getSelectedFont();
        int start = pnlEditor.getTxtpEditor().getSelectionStart();
        StyledDocument style = pnlEditor.getTxtpEditor().getStyledDocument();
        pnlEditor.getTxtpEditor().setStyledDocument(getDocumentStyle(font, style, start, text.length()));
    }//GEN-LAST:event_mniTextFormatActionPerformed

    private void tglCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglCenterActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        StyledDocument doc = pnlEditor.getTxtpEditor().getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
    }//GEN-LAST:event_tglCenterActionPerformed

    private void tglLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglLeftActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        StyledDocument doc = pnlEditor.getTxtpEditor().getStyledDocument();
        SimpleAttributeSet leftAlignment = new SimpleAttributeSet();
        StyleConstants.setAlignment(leftAlignment, StyleConstants.ALIGN_LEFT);
        doc.setParagraphAttributes(0, doc.getLength(), leftAlignment, false);
    }//GEN-LAST:event_tglLeftActionPerformed

    private void tglRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglRightActionPerformed
        pnlTextEditor pnlEditor = (pnlTextEditor) tbpContent.getSelectedComponent();
        StyledDocument doc = pnlEditor.getTxtpEditor().getStyledDocument();
        SimpleAttributeSet rightAlignment = new SimpleAttributeSet();
        StyleConstants.setAlignment(rightAlignment, StyleConstants.ALIGN_RIGHT);
        doc.setParagraphAttributes(0, doc.getLength(), rightAlignment, false);
    }//GEN-LAST:event_tglRightActionPerformed

    private StyledDocument getDocumentStyle(Font font, StyledDocument style, int start, int length) {
        MutableAttributeSet attributeSet = getAttributes(style, start);

        attributeSet.addAttribute(StyleConstants.Bold, font.isBold());
        attributeSet.addAttribute(StyleConstants.Italic, font.isItalic());
        attributeSet.addAttribute(StyleConstants.Size, font.getSize());
        attributeSet.addAttribute(StyleConstants.Family, font.getFamily());
        attributeSet.addAttribute(StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        style.setCharacterAttributes(start, length, attributeSet, true);

        return style;
    }

    private MutableAttributeSet getAttributes(StyledDocument style, int start) {
        Element element = style.getCharacterElement(start);
        AttributeSet as = element.getAttributes();

        return new SimpleAttributeSet(as.copyAttributes());
    }

    private JFileChooser getArchivosChooser() {
        if (archivosChooser == null) {
            archivosChooser = new JFileChooser();
            archivosChooser.addChoosableFileFilter(filtro);
            archivosChooser.setFileFilter(filtro);
        }

        return archivosChooser;
    }

    private JFontChooser getFuentesChooser() {
        if (fuentesChooser == null) {
            fuentesChooser = new JFontChooser();
        }
        return fuentesChooser;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FrmEditor().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseTab;
    private javax.swing.JMenu formatMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenuItem mnINew;
    private javax.swing.JMenuItem mnIOpen;
    private javax.swing.JMenuItem mnISave;
    private javax.swing.JMenuItem mniTextFormat;
    private javax.swing.JTabbedPane tbpContent;
    private javax.swing.JToggleButton tglBold;
    private javax.swing.JToggleButton tglCenter;
    private javax.swing.JToggleButton tglLeft;
    private javax.swing.JToggleButton tglRight;
    // End of variables declaration//GEN-END:variables
}
